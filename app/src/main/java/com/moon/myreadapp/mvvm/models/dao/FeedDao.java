package com.moon.myreadapp.mvvm.models.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.internal.SqlUtils;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table FEED.
*/
public class FeedDao extends AbstractDao<Feed, Long> {

    public static final String TABLENAME = "FEED";

    /**
     * Properties of entity Feed.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Use_count = new Property(2, Integer.class, "use_count", false, "USE_COUNT");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Feedtype = new Property(4, String.class, "feedtype", false, "FEEDTYPE");
        public final static Property Link = new Property(5, String.class, "link", false, "LINK");
        public final static Property Publishtime = new Property(6, java.util.Date.class, "publishtime", false, "PUBLISHTIME");
        public final static Property Language = new Property(7, String.class, "language", false, "LANGUAGE");
        public final static Property Rights = new Property(8, String.class, "rights", false, "RIGHTS");
        public final static Property Uri = new Property(9, String.class, "uri", false, "URI");
        public final static Property Creator = new Property(10, String.class, "creator", false, "CREATOR");
        public final static Property User_id = new Property(11, long.class, "user_id", false, "USER_ID");
    };

    private DaoSession daoSession;


    public FeedDao(DaoConfig config) {
        super(config);
    }
    
    public FeedDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'FEED' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT NOT NULL ," + // 1: title
                "'USE_COUNT' INTEGER," + // 2: use_count
                "'DESCRIPTION' TEXT," + // 3: description
                "'FEEDTYPE' TEXT," + // 4: feedtype
                "'LINK' TEXT," + // 5: link
                "'PUBLISHTIME' INTEGER," + // 6: publishtime
                "'LANGUAGE' TEXT," + // 7: language
                "'RIGHTS' TEXT," + // 8: rights
                "'URI' TEXT," + // 9: uri
                "'CREATOR' TEXT," + // 10: creator
                "'USER_ID' INTEGER NOT NULL );"); // 11: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'FEED'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Feed entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        Integer use_count = entity.getUse_count();
        if (use_count != null) {
            stmt.bindLong(3, use_count);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String feedtype = entity.getFeedtype();
        if (feedtype != null) {
            stmt.bindString(5, feedtype);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(6, link);
        }
 
        java.util.Date publishtime = entity.getPublishtime();
        if (publishtime != null) {
            stmt.bindLong(7, publishtime.getTime());
        }
 
        String language = entity.getLanguage();
        if (language != null) {
            stmt.bindString(8, language);
        }
 
        String rights = entity.getRights();
        if (rights != null) {
            stmt.bindString(9, rights);
        }
 
        String uri = entity.getUri();
        if (uri != null) {
            stmt.bindString(10, uri);
        }
 
        String creator = entity.getCreator();
        if (creator != null) {
            stmt.bindString(11, creator);
        }
        stmt.bindLong(12, entity.getUser_id());
    }

    @Override
    protected void attachEntity(Feed entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Feed readEntity(Cursor cursor, int offset) {
        Feed entity = new Feed( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // use_count
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // feedtype
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // link
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // publishtime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // language
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // rights
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // uri
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // creator
            cursor.getLong(offset + 11) // user_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Feed entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setUse_count(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFeedtype(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLink(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPublishtime(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setLanguage(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRights(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUri(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreator(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUser_id(cursor.getLong(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Feed entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Feed entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM FEED T");
            builder.append(" LEFT JOIN USER T0 ON T.'USER_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Feed loadCurrentDeep(Cursor cursor, boolean lock) {
        Feed entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
         if(user != null) {
            entity.setUser(user);
        }

        return entity;    
    }

    public Feed loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Feed> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Feed> list = new ArrayList<Feed>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Feed> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Feed> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
